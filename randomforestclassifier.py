# -*- coding: utf-8 -*-
"""RandomForestClassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Od0vKS0ZIWUSmETO8-1ccx0CDaAh9nxL
"""

# Import Section
import csv
import codecs
import sys
import io
import numpy as np
import pandas as pd

from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier


from sklearn.metrics import *

#Customized Function Definition
def peformStopWordRemoval(text):
  stopWordRemovedText=""

  return stopWordRemovedText

def peformStemming(text):
  stemmedText=""

  return stemmedText

# Data Preprocessing Module
def preProcessingModule(text):
  returnPreProcessedText=""
  getStopWordRemovedText = peformStopWordRemoval(text)

  returnPreProcessedText = getStopWordRemovedText

  return returnPreProcessedText

# Main Function Module
def main():
  tweets = []
  label = []
  csv.field_size_limit(500 * 1024 * 1024)
  with open('/content/IronyDetectionSmall_TrainDataset.txt', 'r') as f:
      next(f) # skip headings
      reader=csv.reader(f, dialect="excel-tab")
      for line in reader:
          #print(line[2])
          #preProcessedTweetText= preProcessingModule(line[2])
          preProcessedTweetText= line[2]
          #print(preProcessedTweetText)
          tweets.append(preProcessedTweetText)
          if(line[1] == '1'):
            label.append('irony')
          else:
            label.append('not irony')
  X_train = np.array(tweets)
  Y_train = np.array(label)
  classifier = Pipeline([
      ('count_vectorizer', CountVectorizer(ngram_range=(1, 3))),
      ('tfidf', TfidfTransformer(norm='l2', use_idf=True, smooth_idf=True)),
      ('clf', RandomForestClassifier())])

  #train classifier
  classifier.fit(X_train, Y_train)

  testTweets = []
  testLabelGold = []
  with open('/content/IronyDetectionSmall_TestDataset.txt', 'r') as f:
    next(f) # skip headings
    reader=csv.reader(f, dialect="excel-tab")
    for line in reader:
      #print(line[2])
      #preProcessedTweetText= preProcessingModule(line[2])
      preProcessedTweetText= line[2]
      #print(preProcessedTweetText)
      testTweets.append(preProcessedTweetText)
      if(line[1] == '1'):
        testLabelGold.append('irony')
      else:
        testLabelGold.append('not irony')
  #test_label_prediction
  X_test = np.array(testTweets)
  testLabelPredicted = classifier.predict(X_test)
  #print

  #Evaluation
  results = confusion_matrix(testLabelGold, testLabelPredicted)
  print('Confusion Matrix:')
  print(results)
  print('Recall Score:', recall_score(testLabelGold, testLabelPredicted, average=None))
  print('Precision Score:', precision_score(testLabelGold, testLabelPredicted, average=None))
  print('Macro Avg, F1 Score:', f1_score(testLabelGold, testLabelPredicted, average=None))
  print('Accuracy:', accuracy_score(testLabelGold, testLabelPredicted))

  #print('Evaluation report:')
  print(classification_report(testLabelGold, testLabelPredicted))

if __name__ == '__main__':
  main()